/*
20211122 by Hong Jeong, IUT
https://ww1.microchip.com/downloads/en/DeviceDoc/doc2467.pdf
*/

#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include "_main.h"
#include "_buzzer.h"
#include "_adc.h"
#include "_eeprom.h"
#include "_init.h"
#include "_interrupt.h"
#include "_port.h"
#include "_timer2.h"
#include "_uart.h"
#include "_glcd.h"
/**/
unsigned int mUart1_DataView = 0;
unsigned int mINT0_DataView = 0;
unsigned int mINT1_DataView = 0;
unsigned int mData_ADC0 = 0;
unsigned int mData_ADC2 = 0;
unsigned int mData_ADC3 = 0;
unsigned int mData_ADC4 = 0;

char mDis_Scr_IO_ON[]={"O"};
char mDis_Scr_IO_OFF[]={"X"};
char mDis_Scr1[]={"#$%&'()*+,-./0123456"};
char mDis_Scr2[]={"789:;<=>?@ABCDEFGHIJ"};
char mDis_Scr3[]={"KLMNOPQRSTUVWXYZ[]{}"};
/**/	
/************************** Labs *********************************************************/
/* Inline assembly */
/*https://www.nongnu.org/avr-libc/user-manual/inline_asm.html */
/*
int main(void){
	
	asm("ldi r16,255");
	return 0;
}
*/


/* Port Programming: Blinking */
/*
int main(void){
	DDRB = 0xFF;
	PORTB = 0xAA;
	while(1){
		PORTB = ~PORTB;
		_delay_ms(1000);
		
	}
	return 0;
}
*/

/* Port Programming: Rotation */
/*
int main(void){
	DDRB = 0xFF;
	DDRD = 0x00;
	PORTB = 0x7F;
	while (1){
		if (PIND & 0x01){
			PORTB = (PORTB << 1) | (PORTB >> 7);
		}
		else {
			PORTB = (PORTB >> 1) | (PORTB << 7);	
		}
		_delay_ms(1000);
		
	}
	return 0;
}
*/

/* Accessing Flash Memory */
/*
#include <avr/pgmspace.h>

const unsigned char PROGMEM lookup[] = "0123456789abcdefzhijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_-<>,.~`+";

int main(void)
{
	unsigned char a;
	DDRB = 0xFF;
	
	init_devices();
	while (1){
		for (int i=0; i < 128; i++){
			a = pgm_read_byte(&lookup[i]);
			PORTB = ~(a - 0x30);
			_delay_ms(1000);
			lcd_clear();							// clear LCD
			ScreenBuffer_clear();					// clear screen buffer
			lcd_string(0,0,"12345 Hong Jeong");
			lcd_string(2,0, "EEPROM Data");
			lcd_xy(4,0);
			lcd_char(a);
		}
	}
	return 0;
}
*/

/* Accessing EEPROM */
/*
#include <avr/io.h>
#include <avr/eeprom.h>

unsigned char EEMEM *lookup_p;
unsigned char lookup[]="012345";
unsigned char result;

int main(void)
{
	DDRD = 0x00;
	init_devices();
	//S_Start();
	S_Star();
	while (1){
		if((PIND&(1<<0)) == 0){  //if PD0 is LOW
			//eeprom_write_byte(lookup_p,lookup[4]);
			//In_EEPROM_Write(*lookup_p,lookup[5]);
			In_EEPROM_Write(100,lookup[5]);
		}
		else {
			//result = eeprom_read_byte(lookup_p); //read from EEPROM
			//result = In_EEPROM_Read(*lookup_p);
			result = In_EEPROM_Read(100);
			_delay_ms(1000);
			lcd_clear();							// clear LCD
			ScreenBuffer_clear();					// clear screen buffer
			lcd_string(0,0,"12345 Hong Jeong");
			lcd_string(2,0,"EEPROM Data");
			lcd_xy(4,0);
			lcd_char(result);
		}
	}

	return 0;
}
*/




/* ADC  */
/**/
int main (void)
{
	init_devices();
	while (1){
		mData_ADC0 = Read_Adc_Data(0)/10;		// Read analog port 0
		_delay_ms(100);						
		lcd_clear();							// clear LCD
		ScreenBuffer_clear();					// clear screen buffer
		lcd_string(0,0,"ADC0 Potentiometer");	// output ADC0 Potentiometer 
		GLCD_Rectangle(20,0,30,mData_ADC0);		// output line gage
		lcd_xy(1,0); GLCD_4DigitDecimal(mData_ADC0);	// output ADC0
	}
}
/**/






/* UART and ADC Registers ('-' means default 0)
UART Registers:
	UCSRnA: RXCn TXCn UDREn - - - - -
	UCSRnB: RXCIEn TXCIEn UDRIEn RXENn TXENn - - -
	UCSRnC: - - - - - UCSZn1 UCSZn0 -
	
ADC Registers:
	ADMUX: REFS1 REFS0 - - MUX3 MUX2 MUX1 MUX0
	ADCSA: ADEN ADSC - ADIF ADIE ADPS2 ADPS1 ADPS0
*/
	

/* Serial communications: Loop-back by polling */
/*
#define F_CPU 16000000UL
#define BAUD 9600
void main(void)										
{
	unsigned char data;
	// UART1: 9600 8N1
	UBRR1H = (F_CPU/16/BAUD-1)>>8;		// UBRR
	UBRR1L = F_CPU/16/BAUD-1;			
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);		// receiver and transmitter
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);	// 8-bit
				
	while (1){
		while (!(UCSR1A & (1<<RXC1)));	// receiver polling
		data = UDR1;
		while(!(UCSR1A & (1<<UDRE1)));	// transmitter polling
		UDR1 = data;
	}	
}
*/
	
////////////////////////////////////////////////////
/* Serial communication: Loop-back by Interrupt	*/
/*
#define F_CPU 16000000UL
#define BAUD 9600
int main (void)
{
	cli();
	// UART1: 9600 8N1
	UBRR1H = (F_CPU/16/BAUD-1)>>8;		// UBRR
	UBRR1L = F_CPU/16/BAUD-1;
	UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); // receiver interrupt
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);			// character size 8
				
	sei();
	while(1);
}
*/
		
/*
SIGNAL(USART1_RX_vect)					// Serial ISR
{
	cli();								//disable all interrupts
	UDR1 = UDR1;			
	sei();								//re-enable interrupts
}
*/


/////////////////////////////////////////////////////////////
/* ADC: ADC to COM by Polling */  
/*
#define F_CPU 16000000UL
#define BAUD 9600
void usart_send (unsigned char ch);
int main (void)
{							
	// UART1: 9600 8N1
	UBRR1H = (F_CPU/16/BAUD-1)>>8;		// UBRR
	UBRR1L = F_CPU/16/BAUD-1;
	UCSR1B = (1<<TXEN1);				//Transmission enable
	UCSR1C = (1<< UCSZ11)|(1<<UCSZ10);	// 8-bit
		
	// ADC Initialization
	ADMUX = (1<<REFS1)|(1<<REFS0);  // 0xC0, 2.56V Vref, right-justified, channel 0
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // 0x87

	while (1)
	{
		ADCSRA|=(1<<ADSC);				// start conversion
		while((ADCSRA&(1<<ADIF))==0);	// polling conversion to finish		
		ADCSRA |= (1<<ADIF);			// reset interrupt

		int a = ADCL;
		a = a | (ADCH<<8);
			
		if(a < 0)
		{
			usart_send('-');
			a *= -1;
		}
			
		usart_send((a/1000)+'0');
		a = a % 1000;
		usart_send((a/100)+'0');
		a = a % 100;
		usart_send((a/10)+'0');
		a = a % 10;
		usart_send((a)+'0');
		usart_send('\r');
			
		_delay_ms(100);
	}
	return 0;
}

void usart_send (unsigned char ch)
{
	while (!(UCSR1A & (1<<UDRE1))); 	// transmission complete?
	UDR1 = ch;							// transmit ch
}
*/
	
/* ADC: ADC to COM by Interrupt */  
/*
#define F_CPU 16000000UL
#define BAUD 9600

void main (void)
{				
	cli();			
	// UART1: 9600 8N1
	UBRR1H = (F_CPU/16/BAUD-1)>>8;		// UBRR
	UBRR1L = F_CPU/16/BAUD-1;
	UCSR1B = (1<<TXEN1);				// Transmission enable
	UCSR1C = (1<< UCSZ11)|(1<<UCSZ10);	// 8-bit

	// ADC Initialization
	ADMUX = (1<<REFS1)|(1<<REFS0);  // 0xC0, 2.56V Vref, right-justified, channel 0
	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // 0x8F
		
	sei();
	ADCSRA |=(1<<ADSC);				// start conversion
		
	while (1);
}

void usart_send (unsigned char ch)
{
	while (! (UCSR1A & (1<<UDRE1))); 	// polling transmission complete?
	UDR1 = ch;							// transmit ch
}
	
SIGNAL(ADC_vect)					// ADC interrupt
{
	cli();
	ADCSRA |= (1<<ADIF);			// reset interrupt
		
	int a = ADCL;					// ADC register
	a = a | (ADCH<<8);
		
	if(a < 0)
	{
		usart_send('-');
		a *= -1;
	}
		
	usart_send((a/1000)+'0');
	a = a % 1000;
	usart_send((a/100)+'0');
	a = a % 100;
	usart_send((a/10)+'0');
	a = a % 10;
	usart_send((a)+'0');
	usart_send('\r');

	sei();
	ADCSRA |=(1<<ADSC);				// start conversion
}
*/

/* Stepper Motor */
/*
#define F_CPU 16000000UL
#include "avr/io.h"
#include "util/delay.h"
int main ()
{
	DDRD = 0x00;
	DDRB = 0xFF;
	while (1)
	{
		if( (PIND&0x80) == 0)
		{
			PORTB = 0x66;
			_delay_ms (100);
			PORTB = 0xCC;
			_delay_ms (100);
			PORTB = 0x99;
			_delay_ms (100);
			PORTB = 0x33;
			_delay_ms (100);
		}
		else
		{
			PORTB = 0x66;
			_delay_ms (100);
			PORTB = 0x33;
			_delay_ms (100);
			PORTB = 0x99;
			_delay_ms (100);
			PORTB = 0xCC;
			_delay_ms (100);
		}
	}
}
*/
	
	
/************************** References ***************************************************/
	/* Execute Template.c */
	/*
	extern int main(void);
	int main (void)
	{
		main_template1();
	}
	*/
	
	
	/* Graphics: basics */
	/*
	int main(void)
	{
		init_devices();								// initialize LCD
		S_Start();									// sound
		lcd_clear();
		lcd_string(0,0,"====================");       
		lcd_string(1,0,"   ATmega128 GLCD   ");		
		lcd_string(2,0,mDis_Scr1);
		GLCD_Line(30,10,40,20);				GLCD_Rectangle(30,31,40,41);    	
		lcd_string(4,5,mDis_Scr_IO_ON);  	GLCD_Circle(35,55,5);
		lcd_xy(4,12); GLCD_4DigitDecimal(1235);
		lcd_string(6,0, "SOC3050 Hong Jeong");
	}
	*/


	/* Graphics: Random circles 	*/
	/*
	int main (void)
	{
		// random numbers and seed.
		uint16_t u_rand_x = 0;
		uint16_t u_rand_y = 0;
		uint16_t u_rand_r = 0;
		time_t t;
		init_devices();
		lcd_clear();
		srand((unsigned) time(&t));
		while(1){
			u_rand_x = rand()%64;
			u_rand_y = rand()%128;
			u_rand_r = rand()%10;
			GLCD_Circle(u_rand_x, u_rand_y, u_rand_r);
			_delay_ms(100);
		}
	}
	*/
	
	/* 	Graphics: Random movement 	*/
	/*
	int main(void)
	{
		//random numbers and seed.
		uint16_t u_rand_x = 0, old_x = 0;
		uint16_t u_rand_y = 0, old_y = 0;
		time_t t;
		
		init_devices();
		lcd_clear();
		srand((unsigned) time(&t));
		while(1){
			//S_Star();
			u_rand_x = rand()%64;
			u_rand_y = rand()%128;
			GLCD_Line(old_x, old_y, u_rand_x, u_rand_y);
			old_x = u_rand_x; old_y = u_rand_y;
			_delay_ms(100);
		}
	}
	*/
	
	
	/* Serial communication: Loop-back by Interrupt */
	/*
	int main (void)
	{
		init_devices();
		while(1)
		;
	}
	*/
	
	/* Serial communication: Loop-back by Interrupt and commands */
	/*
	int main (void)
	{
		init_devices();
		while(1){
			Serial_Main();
		}
	}
	*/
	
	/* ADC  */
	/*
	int main (void)
	{
		init_devices();
		while (1){
			Data_ADC0 = Read_Adc_Data(0)/10;		// Read analog port 0
			_delay_ms(100);						
			lcd_clear();							// clear LCD
			ScreenBuffer_clear();					// clear screen buffer
			lcd_string(0,0,"ADC0 Potentiometer");	// output ADC0 Potentiometer 
			GLCD_Rectangle(20,0,30,Data_ADC0);		// output line gage
			lcd_xy(1,0); GLCD_4DigitDecimal(Data_ADC0);	// output ADC0
		}
	}
	*/
	
	/* Serial communication: ADC to COM and GLCD */
	/*
	int main (void)
	{
		init_devices();
		lcd_clear();
		//ScreenBuffer_clear();
		while(1)
		{
			Data_ADC0 = Read_Adc_Data(0);		// Analog port 0 reading
	
			if(Task1_Of_Timer2 == 1)			// Execute if Task1_Of_Timer2
			{									// 50ms interval
				ToggleBit(PORTB,PORTB0);		// ~PORTB.0
				USART1_putchdecu(Data_ADC0);	
				puts_USART1("\r\n");
				lcd_clear(); 
				lcd_xy(3,3);
				GLCD_4DigitDecimal(Data_ADC0);	
				
				Task1_Of_Timer2=0;				// Reset Task1_Of_Timer2 
			}
		
		}
	}
	*/
	
	/* ADC to COM
	void usart_send (unsigned char ch);
	int main (void)
	{
		// UART initialization: 8N1, transmitter
		UCSR1B = (1<<TXEN1);				//Transmission enable
		UCSR1C = (1<< UCSZ11)|(1<<UCSZ10);	// 8-bit
		UBRR1L = F_CPU/16/BAUD-1;			// UBRR
		// ADC Initialization
		ADCSRA= 0x87; //make ADC enable and select ck/128
		ADMUX= 0xC0;  //2.56V Vref, right-justified, channel 0
		
		while (1)
		{
			ADCSRA|=(1<<ADSC);				// start conversion
			while((ADCSRA&(1<<ADIF))==0);	// wait for conversion to finish
			ADCSRA |= (1<<ADIF);			// reset interrupt

			int a = ADCL;
			a = a | (ADCH<<8);
			
			if(a < 0)
			{
				usart_send('-');
				a *= -1;
			}
			
			usart_send((a/1000)+'0');
			a = a % 1000;
			usart_send((a/100)+'0');
			a = a % 100;
			usart_send((a/10)+'0');
			a = a % 10;
			usart_send((a)+'0');
			usart_send('\r');
			
			_delay_ms(100);
		}
		return 0;
	}

	void usart_send (unsigned char ch)
	{
		while (! (UCSR1A & (1<<UDRE1))); 	//wait until UDR0 is empty
		UDR1 = ch;							//transmit ch
	}

	void usart_print(char* str)
	{
		int i = 0;
		while(str[i] != 0)
		usart_send(str[i]);
	}
	*/
	
		
	/* CDS  */
	/*
	int main (void)
	{
	Data_ADC2 = Read_Adc_Data(1) / 50;		// read analog port 0
	_delay_ms(1000);				
	
	lcd_clear();				
	ScreenBuffer_clear();			
	lcd_string(0,0,"ADC1 CDS");			
	GLCD_Circle(35,55,Data_ADC2);		
	lcd_xy(1,0); 
	GLCD_4DigitDecimal(Data_ADC2); 
	}	
	*/
	
		
	/* Joystick */
	/*
	int main (void)
	{
	Data_ADC3 = Read_Adc_Data(3) / 14;			// read analog port
	Data_ADC4 = Read_Adc_Data(4) / 8;			// read analog port
	_delay_ms(3000);			
	lcd_clear();				
	ScreenBuffer_clear();			
	lcd_string(0,0,"ADC3,ADC4 JOYSTICK");		// output joystick position
	GLCD_Line(32,0,31,127);   GLCD_Line(0,63,63,63); // line output horizontal vertical
	GLCD_Circle(Data_ADC3,Data_ADC4,5);			// output position
	}
	*/
