
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800108  00800108  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d3  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011de  00000000  00000000  00002beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001555  00000000  00000000  00003dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00005320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3c  00000000  00000000  0000592c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001836  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00007d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_1>
   8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
 * 4. Practice while loop control structures
 */
int main(void)
{
	// Initialize system - demonstrates proper initialization sequence
	init_devices();
  ce:	0e 94 9d 00 	call	0x13a	; 0x13a <init_devices>

	// Simple LED blinking demonstration
	while (1)
	{
		// Turn on all LEDs on PORTB
		PORTB = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	39 e6       	ldi	r19, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0xe>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x18>
  e6:	00 00       	nop
		_delay_ms(500);

		// Turn off all LEDs on PORTB
		PORTB = 0x00;
  e8:	18 ba       	out	0x18, r1	; 24
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	39 e6       	ldi	r19, 0x69	; 105
  ee:	98 e1       	ldi	r25, 0x18	; 24
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x22>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x2c>
  fa:	00 00       	nop
  fc:	eb cf       	rjmp	.-42     	; 0xd4 <main+0x6>

000000fe <__vector_21>:
 * LEARNING: Shows non-blocking ADC conversion
 */
volatile unsigned char adc_interrupt_complete = 0;

ISR(ADC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	/* Read conversion result */
	adc_result = ADCL + (ADCH << 8);
 10e:	24 b1       	in	r18, 0x04	; 4
 110:	85 b1       	in	r24, 0x05	; 5
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	98 2f       	mov	r25, r24
 116:	88 27       	eor	r24, r24
 118:	82 0f       	add	r24, r18
 11a:	91 1d       	adc	r25, r1
 11c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <adc_result+0x1>
 120:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <adc_result>
	adc_interrupt_complete = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <init_devices>:
	/*
	 * STEP 1: DISABLE INTERRUPTS
	 * Safety measure: prevent interrupts during initialization
	 * Assembly equivalent: cli
	 */
	cli(); // Clear global interrupt flag
 13a:	f8 94       	cli
	/*
	 * STEP 2: INITIALIZE BASIC I/O PORTS
	 * Foundation: Setup digital input/output capabilities
	 * Educational: Demonstrates DDR (Data Direction Register) usage
	 */
	Port_init(); // Initialize port directions and initial states
 13c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Port_init>
	/*
	 * STEP 8: ENABLE INTERRUPTS
	 * Final step: Allow interrupt processing to begin
	 * Assembly equivalent: sei
	 */
	sei(); // Set global interrupt flag
 140:	78 94       	sei
 142:	08 95       	ret

00000144 <__vector_1>:
 * TRIGGER: Falling edge on PD0 (configured in Interrupt_init)
 *
 * VECTOR: INT0_vect (highest priority external interrupt)
 */
ISR(INT0_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
	/* Update statistics atomically */
	int0_count++;
 152:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <int0_count>
 156:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <int0_count+0x1>
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <int0_count+0x1>
 160:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <int0_count>
	total_interrupts++;
 164:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <total_interrupts>
 168:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <total_interrupts+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <total_interrupts+0x1>
 172:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <total_interrupts>
	last_interrupt = 0; // Indicate INT0 was last triggered
 176:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <last_interrupt>
	 * - Minimal processing time
	 * - Statistical data collection
	 * - Optional debugging output
	 * - Proper variable access (volatile globals)
	 */
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_2>:
 * TRIGGER: Falling edge on PD1 (configured in Interrupt_init)
 *
 * VECTOR: INT1_vect (second priority external interrupt)
 */
ISR(INT1_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	/* Update statistics atomically */
	int1_count++;
 196:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <int1_count>
 19a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <int1_count+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <int1_count+0x1>
 1a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <int1_count>
	total_interrupts++;
 1a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <total_interrupts>
 1ac:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <total_interrupts+0x1>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <total_interrupts+0x1>
 1b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <total_interrupts>
	last_interrupt = 1; // Indicate INT1 was last triggered
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <last_interrupt>
	 * Multiple interrupt sources can be handled similarly:
	 * - Each ISR updates relevant statistics
	 * - Common pattern for event counting
	 * - Enables system monitoring and debugging
	 */
}
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <Port_init>:
	/*
	 * PORTA CONFIGURATION: General Data Output
	 * Educational use: 8-bit data display, pattern generation
	 * DDR=0xFF (all outputs), PORT=0x00 (start with all LOW)
	 */
	DDRA = 0xFF;  // Configure PORTA as output
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // Initialize all pins LOW
 1d2:	1b ba       	out	0x1b, r1	; 27
	 *
	 * LEARNING NOTE: Many educational boards use active LOW LEDs
	 * - Writing 0 turns LED ON (current flows through LED)
	 * - Writing 1 turns LED OFF (no current flow)
	 */
	DDRB = 0xFF;  // Configure PORTB as output
 1d4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF; // Initialize all LEDs OFF (active LOW)
 1d6:	88 bb       	out	0x18, r24	; 24
	 * PORTC CONFIGURATION: Mixed I/O
	 * Educational use: Partial input/output demonstration
	 * Upper 4 bits (PC7-PC4): Inputs with pull-ups
	 * Lower 4 bits (PC3-PC0): Outputs
	 */
	DDRC = 0x0F;  // PC7-PC4 inputs, PC3-PC0 outputs
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	94 bb       	out	0x14, r25	; 20
	PORTC = 0xF0; // Enable pull-ups on inputs, outputs start LOW
 1dc:	20 ef       	ldi	r18, 0xF0	; 240
 1de:	25 bb       	out	0x15, r18	; 21
	 *
	 * LEARNING NOTE: Pull-up resistors prevent floating inputs
	 * - Internal pull-ups provide stable HIGH when button not pressed
	 * - Button press pulls pin LOW (active LOW buttons)
	 */
	DDRD = 0x00;  // Configure PORTD as input
 1e0:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xFF; // Enable internal pull-up resistors
 1e2:	82 bb       	out	0x12, r24	; 18
	 * Educational use: LCD interface, external interrupts
	 * PE0, PE1: External interrupt inputs
	 * PE2, PE3: General I/O
	 * PE4-PE7: LCD control signals
	 */
	DDRE = 0xF0;  // PE7-PE4 outputs (LCD), PE3-PE0 inputs
 1e4:	22 b9       	out	0x02, r18	; 2
	PORTE = 0x0F; // Enable pull-ups on inputs, LCD signals start LOW
 1e6:	93 b9       	out	0x03, r25	; 3
	 *
	 * LEARNING NOTE: ADC inputs should not have pull-ups enabled
	 * - Pull-ups interfere with accurate analog measurements
	 * - External sensors provide their own signal levels
	 */
	DDRF = 0x00;  // Configure PORTF as input (ADC)
 1e8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0x00; // No pull-ups for analog inputs
 1ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	 * PORTG CONFIGURATION: Audio and Additional Outputs
	 * Educational use: Buzzer control, PWM outputs
	 * PG4: Buzzer output
	 * Others: General purpose outputs
	 */
	DDRG = 0xFF;  // Configure PORTG as output
 1f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG = 0x00; // Initialize all outputs LOW
 1f4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 1f8:	08 95       	ret

000001fa <__vector_10>:
 * ; Perform ISR tasks
 * POP SREG, R1, R0, etc.       ; Restore context
 * RETI                         ; Return from interrupt
 */
ISR(TIMER2_OVF_vect)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
	/*
	 * STEP 1: Reload timer start value
	 * This ensures consistent timing for next overflow
	 * Must be done first to maintain accurate timing
	 */
	TCNT2 = timer2_start_value; // Reload for next period
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	84 bd       	out	0x24, r24	; 36

	/*
	 * STEP 2: Update system millisecond counter
	 * Provides system uptime reference for applications
	 */
	system_milliseconds++;
 216:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <system_milliseconds>
 21a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <system_milliseconds+0x1>
 21e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <system_milliseconds+0x2>
 222:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <system_milliseconds+0x3>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	a1 1d       	adc	r26, r1
 22a:	b1 1d       	adc	r27, r1
 22c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <system_milliseconds>
 230:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <system_milliseconds+0x1>
 234:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <system_milliseconds+0x2>
 238:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <system_milliseconds+0x3>

	/*
	 * STEP 3: Increment main timer counter
	 * Used for primary task scheduling
	 */
	Count_Of_Timer2++;
 23c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Count_Of_Timer2>
 240:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Count_Of_Timer2+0x1>
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Count_Of_Timer2+0x1>
 24a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Count_Of_Timer2>
	/*
	 * STEP 4: Check and trigger Task 1 (Primary task)
	 * Default: every 500ms (500 timer ticks)
	 * Used for main periodic operations
	 */
	if (Count_Of_Timer2 >= Time_Of_Timer2)
 24e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <Count_Of_Timer2>
 252:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <Count_Of_Timer2+0x1>
 256:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Time_Of_Timer2>
 25a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Time_Of_Timer2+0x1>
 25e:	28 17       	cp	r18, r24
 260:	39 07       	cpc	r19, r25
 262:	50 f0       	brcs	.+20     	; 0x278 <__vector_10+0x7e>
	{
		Task1_Of_Timer2 = 1; // Signal task 1 ready
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Task1_Of_Timer2+0x1>
 26c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Task1_Of_Timer2>
		Count_Of_Timer2 = 0; // Reset counter
 270:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Count_Of_Timer2+0x1>
 274:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Count_Of_Timer2>
	 * STEP 5: Check and trigger Task 2 (Secondary task)
	 * Independent timing for secondary operations
	 * Example: LED blinking, sensor reading
	 */
	static unsigned int count2 = 0;
	count2++;
 278:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count2.2695>
 27c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count2.2695+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count2.2695+0x1>
 286:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count2.2695>
	if (count2 >= Time2_Of_Timer2)
 28a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <Time2_Of_Timer2>
 28e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <Time2_Of_Timer2+0x1>
 292:	82 17       	cp	r24, r18
 294:	93 07       	cpc	r25, r19
 296:	50 f0       	brcs	.+20     	; 0x2ac <__vector_10+0xb2>
	{
		Task2_Of_Timer2 = 1; // Signal task 2 ready
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Task2_Of_Timer2+0x1>
 2a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Task2_Of_Timer2>
		count2 = 0;			 // Reset counter
 2a4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count2.2695+0x1>
 2a8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count2.2695>
	 * STEP 6: Check and trigger Task 3 (Tertiary task)
	 * Independent timing for low-frequency operations
	 * Example: data logging, communication
	 */
	static unsigned int count3 = 0;
	count3++;
 2ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count3.2696>
 2b0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <count3.2696+0x1>
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <count3.2696+0x1>
 2ba:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count3.2696>
	if (count3 >= Time3_Of_Timer2)
 2be:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Time3_Of_Timer2>
 2c2:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Time3_Of_Timer2+0x1>
 2c6:	82 17       	cp	r24, r18
 2c8:	93 07       	cpc	r25, r19
 2ca:	50 f0       	brcs	.+20     	; 0x2e0 <__vector_10+0xe6>
	{
		Task3_Of_Timer2 = 1; // Signal task 3 ready
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Task3_Of_Timer2+0x1>
 2d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Task3_Of_Timer2>
		count3 = 0;			 // Reset counter
 2d8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count3.2696+0x1>
 2dc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count3.2696>
	 * - Consistent timing base
	 *
	 * Main program should check flags and execute tasks:
	 * if (Task1_Of_Timer2) { execute_task1(); Task1_Of_Timer2 = 0; }
	 */
}
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_30>:
	s = TABLE[high];
	s <<= 8;
	s |= TABLE[low];

	return s;
}
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 306:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <uart_rx_buffer>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <uart_rx_flag>
 310:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <uart_rx_buffer>
 314:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <uart_command>
 318:	8f 91       	pop	r24
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <__vector_18>:
/*
 * Legacy ISR for USART0 (if needed for compatibility)
 * Note: Most examples use USART1, but some may reference USART0
 */
ISR(USART0_RX_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	1f 92       	push	r1
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
	// Basic compatibility ISR - can be expanded if needed
	volatile unsigned char dummy = UDR0;
 33a:	8c b1       	in	r24, 0x0c	; 12
 33c:	89 83       	std	Y+1, r24	; 0x01
	(void)dummy; // Suppress unused variable warning
 33e:	89 81       	ldd	r24, Y+1	; 0x01
}
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
